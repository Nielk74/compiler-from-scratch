`> [10, 0] Program
   +> ListDeclClass [List with 1 elements]
   |  []> [10, 0] DeclClass
   |      +> [10, 6] Identifier (A)
   |      |  definition: type defined at [10, 0], type=A
   |      +> [builtin] Identifier (Object)
   |      |  definition: type (builtin), type=Object
   |      +> ListDeclField [List with 0 elements]
   |      `> ListDeclMethod [List with 0 elements]
   `> [11, 0] Main
      +> ListDeclVar [List with 1 elements]
      |  []> [12, 6] DeclVar
      |      +> [12, 4] Identifier (A)
      |      |  definition: type defined at [10, 0], type=A
      |      +> [12, 6] Identifier (a)
      |      |  definition: variable defined at [12, 6], type=A
      |      `> [12, 10] Initialization
      |         `> [12, 10] Null
      |            type: null
      `> ListInst [List with 1 elements]
         []> [13, 4] IfThenElse
             +> [13, 8] And
             |  type: boolean
             |  +> [13, 10] Equals
             |  |  type: boolean
             |  |  +> [13, 8] Identifier (a)
             |  |  |  definition: variable defined at [12, 6], type=A
             |  |  `> [13, 13] Null
             |  |     type: null
             |  `> [13, 26] Equals
             |     type: boolean
             |     +> [13, 21] Null
             |     |  type: null
             |     `> [13, 29] Null
             |        type: null
             +> ListInst [List with 1 elements]
             |  []> [14, 8] Print
             |      `> ListExpr [List with 1 elements]
             |         []> [14, 14] StringLiteral (a == null && null == null)
             |             type: string
             `> ListInst [List with 1 elements]
                []> [16, 8] Print
                    `> ListExpr [List with 1 elements]
                       []> [16, 14] StringLiteral (!(a == null && null == null))
                           type: string
